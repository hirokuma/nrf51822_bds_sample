/* This file was generated by plugin 'Nordic Semiconductor nRF5x v.1.1.6' (BDS version 1.0.1531.0) */

#ifndef BLE_IOS_H__
#define BLE_IOS_H__

#include <stdint.h>
#include <stdbool.h>
#include "ble.h"
#include "ble_srv_common.h"
#include "app_util_bds.h"



/**@brief ios event type. */
typedef enum
{ 
    BLE_IOS_INPUT_EVT_NOTIFICATION_ENABLED,  /**< input value notification enabled event. */
    BLE_IOS_INPUT_EVT_NOTIFICATION_DISABLED, /**< input value notification disabled event. */
    BLE_IOS_INPUT_EVT_WRITE, /**< input write event. */
    BLE_IOS_OUTPUT_EVT_NOTIFICATION_ENABLED,  /**< output value notification enabled event. */
    BLE_IOS_OUTPUT_EVT_NOTIFICATION_DISABLED, /**< output value notification disabled event. */
    BLE_IOS_OUTPUT_EVT_CCCD_WRITE, /**< output CCCD write event. */
} ble_ios_evt_type_t;

// Forward declaration of the ble_ios_t type.
typedef struct ble_ios_s ble_ios_t;








/**@brief input structure. */
typedef struct
{
    int8_t value;
} ble_ios_input_t;
/**@brief output structure. */
typedef struct
{
    uint8_t value;
} ble_ios_output_t;

/**@brief ios Service event. */
typedef struct
{
    ble_ios_evt_type_t evt_type;    /**< Type of event. */
    union {
        uint16_t cccd_value; /**< Holds decoded data in Notify and Indicate event handler. */
        ble_ios_input_t input; /**< Holds decoded data in Write event handler. */
    } params;
} ble_ios_evt_t;

/**@brief ios Service event handler type. */
typedef void (*ble_ios_evt_handler_t) (ble_ios_t * p_ios, ble_ios_evt_t * p_evt);

/**@brief ios Service init structure. This contains all options and data needed for initialization of the service */
typedef struct
{
    ble_ios_evt_handler_t     evt_handler; /**< Event handler to be called for handling events in the ios Service. */
    ble_ios_input_t ble_ios_input_initial_value; /**< If not NULL, initial value of the input characteristic. */ 
    ble_ios_output_t ble_ios_output_initial_value; /**< If not NULL, initial value of the output characteristic. */ 
} ble_ios_init_t;

/**@brief ios Service structure. This contains various status information for the service.*/
struct ble_ios_s
{
    ble_ios_evt_handler_t evt_handler; /**< Event handler to be called for handling events in the ios Service. */
    uint16_t service_handle; /**< Handle of ios Service (as provided by the BLE stack). */
    ble_gatts_char_handles_t input_handles; /**< Handles related to the input characteristic. */
    ble_gatts_char_handles_t output_handles; /**< Handles related to the output characteristic. */
    uint16_t conn_handle; /**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). */
};

/**@brief Function for initializing the ios.
 *
 * @param[out]  p_ios       ios Service structure. This structure will have to be supplied by
 *                          the application. It will be initialized by this function, and will later
 *                          be used to identify this particular service instance.
 * @param[in]   p_ios_init  Information needed to initialize the service.
 *
 * @return      NRF_SUCCESS on successful initialization of service, otherwise an error code.
 */
uint32_t ble_ios_init(ble_ios_t * p_ios, const ble_ios_init_t * p_ios_init);

/**@brief Function for handling the Application's BLE Stack events.*/
void ble_ios_on_ble_evt(ble_ios_t * p_ios, ble_evt_t * p_ble_evt);

/**@brief Function for setting the output.
 *
 * @details Sets a new value of the output characteristic. The new value will be sent
 *          to the client the next time the client reads the output characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_ios                 ios Service structure.
 * @param[in]   p_output  New output.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_ios_output_set(ble_ios_t * p_ios, ble_ios_output_t * p_output);

/**@brief Function for sending the output.
 *
 * @details The application calls this function after having performed a output.
 *          The output data is encoded and sent to the client.
 *          This function is only generated if the characteristic's Notify or Indicate property is not 'Excluded'.
 *
 * @param[in]   p_ios                    ios Service structure.
 * @param[in]   p_output               New output.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_ios_output_send(ble_ios_t * p_ios, ble_ios_output_t * p_output);

#endif //_BLE_IOS_H__
